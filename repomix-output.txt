This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-03T19:45:38.818Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  api.py
  focus.py
results/
  processing.ipynb
src/
  public/
    vite.svg
  src/
    assets/
      react.svg
    App.css
    App.jsx
    DashboardPage.jsx
    index.css
    main.jsx
  .gitignore
  eslint.config.js
  index.html
  package.json
  README.md
  tailwind.config.js
  vite.config.js
.gitignore
editTodo.py
main.js
old-readme.md
package.json
README.md
todo.txt

================================================================
Repository Files
================================================================

================
File: backend/api.py
================
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import sqlite3
from typing import List, Dict
from datetime import datetime
import pandas as pd

app = FastAPI()

# Configure CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # Vite's default port
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DB_PATH = "focus.db"

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

@app.get("/api/program-insights")
async def get_program_insights():
    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM program_insights", conn)
    conn.close()
    
    # Convert timedelta strings to minutes for easier visualization
    df['total_time'] = pd.to_timedelta(df['total_time']).dt.total_seconds() / 60
    df['average_time'] = pd.to_timedelta(df['average_time']).dt.total_seconds() / 60
    
    return df.to_dict(orient='records')

@app.get("/api/focus-logs/today")
async def get_today_focus_logs():
    conn = get_db_connection()
    today = datetime.now().strftime("%m/%d/%Y")
    df = pd.read_sql_query(
        "SELECT * FROM focus_logs WHERE date = ? ORDER BY time",
        conn,
        params=(today,)
    )
    conn.close()
    return df.to_dict(orient='records')

@app.get("/api/focus-logs/timeline")
async def get_focus_timeline():
    conn = get_db_connection()
    df = pd.read_sql_query("""
        SELECT date, program, 
               COUNT(*) as switches,
               COUNT(DISTINCT program) as unique_programs
        FROM focus_logs 
        GROUP BY date
        ORDER BY date
    """, conn)
    conn.close()
    return df.to_dict(orient='records')

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

================
File: backend/focus.py
================
import os
import pandas as pd
from win32gui import GetWindowText, GetForegroundWindow
from datetime import datetime
import win32process  # For PID
import psutil  # Gives PID info
import sqlite3

db_file = 'results/focus.db'

#First, we check if table exists, reference createTable()
#Next, we get our data and establish connection to the db. After that, we query to check the last program and check for change
#If not, input into db, otherwise return nothing
def storeFocus():
    # Get the current focused window
    createTable()
    data = getFocused() #HWND object
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()

    cursor.execute('''
        SELECT focused FROM focus_logs ORDER BY id DESC LIMIT 1               
    ''') #SELECTED focused column from the last input.
    last_focused = cursor.fetchone()
    print(data['Focused'])
    if last_focused and last_focused[0] == data['Focused']:
        connection.close()
        return
    
    cursor.execute('''
        INSERT INTO focus_logs (date, time, focused, program)
        VALUES (?, ?, ?, ?)
    ''', (data['Date'], data['Time'], data['Focused'], data['Program']))
    connection.commit()
    connection.close()
    #Ensure we close connections

    

# Gets the focused window's title.
# Returns a dictionary with date-time, focused window title, and program name.
def getFocused():
    HWND = GetForegroundWindow()
    tid, pid = win32process.GetWindowThreadProcessId(HWND)
    time = datetime.now()  # Corrected this line
    data = {
        "Date": time.strftime("%m/%d/%Y"),
        "Time": time.strftime("%H:%M:%S"),
        "Focused": GetWindowText(HWND),
        "Program": psutil.Process(pid).name(),
    }
    return data

#If table doesnt exist, it gets created
def createTable():
    connection = sqlite3.connect(db_file) #A connection to the database
    cursor = connection.cursor() #Allows us to execute SQL

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS focus_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            time TEXT,
            focused TEXT,
            program TEXT,
            session_end BOOLEAN DEFAULT 0
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS program_insights (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            program TEXT UNIQUE,  -- Ensure the program column is unique
            total_time TEXT, 
            average_time TEXT,
            context_switch INTEGER,
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_insights (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS general_insights (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            total_context_switches INTEGER DEFAULT 0,
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')

    connection.commit()
    connection.close()

def dropFocusLogs():
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()
    cursor.execute('''
    DROP TABLE focus_logs;               
    ''')

    connection.commit()
    connection.close()

def dropProgramInsights():
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()
    cursor.execute('''
    DROP TABLE program_insights;               
    ''')

    connection.commit()
    connection.close()
    
def dropDailyInsights():
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()
    cursor.execute('''
    DROP TABLE daily_insights;               
    ''')

    connection.commit()
    connection.close()
    
def dropGeneralInsights():
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()
    cursor.execute('''
    DROP TABLE general_insights;               
    ''')

    connection.commit()
    connection.close()
    
# This function processes every stat thats in the program scope.
def programStats():
    """
    Per Program
        1. total_time : Total time on Program DONE
        2. Most used program in general *Can be accomplished by sorting via Total Time DONE
        3. average_time : sums program until a program is changed, then at end does time[program]/changes[program] DONE
        4. context_switch : changes[program], total number of program switches DONE
    """
    connection = sqlite3.connect(db_file)   
    df = pd.read_sql("SELECT * FROM focus_logs",connection)
    #The first thing is to add a tracking ended entry. So...
    # Now by entry, I want to get a total time/add up datetimes. Join "Date" and "Time" then just sum up?
    df['datetime'] = pd.to_datetime(df['date'] + ' ' + df['time'])
    df = df.sort_values(by=['datetime'])

    # Current datetime - next datetime
    df['timespent'] = df['datetime'].shift(-1) - df['datetime']
    # For the last row, set a default time (e.g., 5 seconds), as there's no next row
    df.iloc[-1, df.columns.get_loc('timespent')] = pd.Timedelta(seconds=5)

    total_time_per_program = df.groupby('program')['timespent'].sum()
    cursor = connection.cursor()

    # Next code is to calcuate average_time. I did this by summing up until we context switch (change programs), then average those sums.
    total_time_per_program = {}
    program_switch_counts = {}
    previous_program = None
    program_start_time = None


    for i, row in df.iterrows():
        current_program = row['program']
        
        # First entry handling
        if previous_program is None:  
            previous_program = current_program
            program_start_time = row['datetime']
            continue

        # When program changes, we sum from current datetime to start datetime. Giving us a total spent before context switching.
        if current_program != previous_program or row.get('session_end', False):
            time_spent = row['datetime'] - program_start_time

            # Update total time and switch count for the previous program
            if previous_program not in total_time_per_program:
                total_time_per_program[previous_program] = time_spent
                program_switch_counts[previous_program] = 1
            else:
                total_time_per_program[previous_program] += time_spent
                program_switch_counts[previous_program] += 1

            #Store our program counts into the dictionary above, and the intial variables for later calculation.
            previous_program = current_program
            program_start_time = row['datetime']

    #Last program handling
    if previous_program is not None:
        time_spent = pd.Timedelta(seconds=5)
        if previous_program not in total_time_per_program:
            total_time_per_program[previous_program] = time_spent
            program_switch_counts[previous_program] = 1
        else:
            total_time_per_program[previous_program] += time_spent
            program_switch_counts[previous_program] += 1

    #Average calc, total / context switches
    average_time_per_program = {
        program: total_time / program_switch_counts[program] 
        for program, total_time in total_time_per_program.items()
    }
    
    #Database updating
    for program, total_time in total_time_per_program.items():
        average_time = average_time_per_program[program]
        context_switch = program_switch_counts[program]
        #put new rows here and update query accordingly
        cursor.execute('''
            INSERT INTO program_insights (program, total_time, average_time, context_switch)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(program) DO UPDATE SET 
            total_time = excluded.total_time,
            average_time = excluded.average_time,
            context_switch = excluded.context_switch,
            last_updated = CURRENT_TIMESTAMP
        ''', (program, str(total_time), str(average_time), context_switch))
    
    connection.commit()
    connection.close()

def dayStats():
    #Todo
    """
    Per Day
        1. Day specific time calculating (Grouping via Date)
    """
    return

def monthStats():
    #Todo
    """
    Per Month
        1. Monthly Insights
    """
    return

def overallStats():
    #Todo
    """
    Overarching insights
        1. Time distribution by Category: Classify specific apps (Work, Personal, Entertainment) and display how its broken down
            - Categorize common applications. Make the user do it currently? Selecting an "intention" per focus session, and it categorizes it then. 

        2. What time of the day are we the most productive? Morning, Afternoon, e.t.c
    """
    return

#Main function to call all others
def processFocus():
    """
    Think about what you want to see from our current data collection.

    *Each Seperation here will be a different table in db, as constantly re-calculating this is too inefficient
    Goes from specific to broader outlooks
    Per Session: Between Session End entries
    1. 

    potential changes:
    - Making a 'datetime' column in each program might be repetitive. Could maybe just make that the entire column? Or is it not that much
        repeated work?
    """
    connection = sqlite3.connect(db_file) 
    cursor = connection.cursor() 
    time = datetime.now() 
    # Insert a session end marker
    cursor.execute('''
        INSERT INTO focus_logs (date, time, focused, program, session_end)
        VALUES (?, ?, ?, ?, ?)
    ''', (time.strftime("%m/%d/%Y"), time.strftime("%H:%M:%S"), 'Session End', 'None', True))

    connection.commit()
    connection.close()
    programStats()
    return

================
File: results/processing.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Processing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th>focused</th>\n",
       "      <th>program</th>\n",
       "      <th>session_end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:13:44</td>\n",
       "      <td>● processing.ipynb - TimeLens - Visual Studio ...</td>\n",
       "      <td>Code.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:13:47</td>\n",
       "      <td>Outlook - Google Chrome</td>\n",
       "      <td>chrome.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:13:48</td>\n",
       "      <td>Mail - Kevin.Dsouza@cix.csi.cuny.edu - Outlook...</td>\n",
       "      <td>chrome.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:14:01</td>\n",
       "      <td>#vaping-corner | The Jade Palace - Discord</td>\n",
       "      <td>Discord.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:14:02</td>\n",
       "      <td>Inbox (24,157) - kevindsouza476@gmail.com - Gm...</td>\n",
       "      <td>chrome.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>229</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:59:32</td>\n",
       "      <td>Task Switching</td>\n",
       "      <td>explorer.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>230</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:59:33</td>\n",
       "      <td>● processing.ipynb - TimeLens - Visual Studio ...</td>\n",
       "      <td>Code.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>231</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>13:59:34</td>\n",
       "      <td>Session End</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>232</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>14:36:49</td>\n",
       "      <td>● processing.ipynb - TimeLens - Visual Studio ...</td>\n",
       "      <td>Code.exe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>233</td>\n",
       "      <td>09/10/2024</td>\n",
       "      <td>14:36:52</td>\n",
       "      <td>Session End</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>233 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id        date      time  \\\n",
       "0      1  09/10/2024  13:13:44   \n",
       "1      2  09/10/2024  13:13:47   \n",
       "2      3  09/10/2024  13:13:48   \n",
       "3      4  09/10/2024  13:14:01   \n",
       "4      5  09/10/2024  13:14:02   \n",
       "..   ...         ...       ...   \n",
       "228  229  09/10/2024  13:59:32   \n",
       "229  230  09/10/2024  13:59:33   \n",
       "230  231  09/10/2024  13:59:34   \n",
       "231  232  09/10/2024  14:36:49   \n",
       "232  233  09/10/2024  14:36:52   \n",
       "\n",
       "                                               focused       program  \\\n",
       "0    ● processing.ipynb - TimeLens - Visual Studio ...      Code.exe   \n",
       "1                              Outlook - Google Chrome    chrome.exe   \n",
       "2    Mail - Kevin.Dsouza@cix.csi.cuny.edu - Outlook...    chrome.exe   \n",
       "3           #vaping-corner | The Jade Palace - Discord   Discord.exe   \n",
       "4    Inbox (24,157) - kevindsouza476@gmail.com - Gm...    chrome.exe   \n",
       "..                                                 ...           ...   \n",
       "228                                     Task Switching  explorer.exe   \n",
       "229  ● processing.ipynb - TimeLens - Visual Studio ...      Code.exe   \n",
       "230                                        Session End          None   \n",
       "231  ● processing.ipynb - TimeLens - Visual Studio ...      Code.exe   \n",
       "232                                        Session End          None   \n",
       "\n",
       "     session_end  \n",
       "0              0  \n",
       "1              0  \n",
       "2              0  \n",
       "3              0  \n",
       "4              0  \n",
       "..           ...  \n",
       "228            0  \n",
       "229            0  \n",
       "230            1  \n",
       "231            0  \n",
       "232            1  \n",
       "\n",
       "[233 rows x 6 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sqlite3\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os \n",
    "import sys\n",
    "cur = os.getcwd()\n",
    "parent = os.path.abspath(os.path.join(cur,os.pardir))\n",
    "sys.path.insert(0,parent)\n",
    "import focus\n",
    "%matplotlib inline\n",
    "\n",
    "connection = sqlite3.connect(\"focus.db\")\n",
    "df = pd.read_sql(\"SELECT * FROM focus_logs\",connection)\n",
    "#The first thing is to add a tracking ended entry. So...\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>program</th>\n",
       "      <th>total_time</th>\n",
       "      <th>average_time</th>\n",
       "      <th>context_switch</th>\n",
       "      <th>last_updated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Code.exe</td>\n",
       "      <td>0 days 00:00:20</td>\n",
       "      <td>0 days 00:00:02.500000</td>\n",
       "      <td>8</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>chrome.exe</td>\n",
       "      <td>0 days 00:15:21</td>\n",
       "      <td>0 days 00:00:34.111111111</td>\n",
       "      <td>27</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Discord.exe</td>\n",
       "      <td>0 days 00:01:05</td>\n",
       "      <td>0 days 00:00:09.285714285</td>\n",
       "      <td>7</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>0 days 00:39:34</td>\n",
       "      <td>0 days 00:09:53.500000</td>\n",
       "      <td>4</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>SearchApp.exe</td>\n",
       "      <td>0 days 00:00:10</td>\n",
       "      <td>0 days 00:00:02</td>\n",
       "      <td>5</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10</td>\n",
       "      <td>explorer.exe</td>\n",
       "      <td>0 days 00:00:27</td>\n",
       "      <td>0 days 00:00:01.928571428</td>\n",
       "      <td>14</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>11</td>\n",
       "      <td>ONENOTE.EXE</td>\n",
       "      <td>0 days 00:25:09</td>\n",
       "      <td>0 days 00:01:00.360000</td>\n",
       "      <td>25</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>12</td>\n",
       "      <td>GoogleDriveFS.exe</td>\n",
       "      <td>0 days 00:00:38</td>\n",
       "      <td>0 days 00:00:12.666666666</td>\n",
       "      <td>3</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>21</td>\n",
       "      <td>ScreenClippingHost.exe</td>\n",
       "      <td>0 days 00:00:29</td>\n",
       "      <td>0 days 00:00:02.900000</td>\n",
       "      <td>10</td>\n",
       "      <td>2024-09-10 18:36:52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                 program       total_time               average_time  \\\n",
       "0   1                Code.exe  0 days 00:00:20     0 days 00:00:02.500000   \n",
       "1   2              chrome.exe  0 days 00:15:21  0 days 00:00:34.111111111   \n",
       "2   3             Discord.exe  0 days 00:01:05  0 days 00:00:09.285714285   \n",
       "3   4                    None  0 days 00:39:34     0 days 00:09:53.500000   \n",
       "4   9           SearchApp.exe  0 days 00:00:10            0 days 00:00:02   \n",
       "5  10            explorer.exe  0 days 00:00:27  0 days 00:00:01.928571428   \n",
       "6  11             ONENOTE.EXE  0 days 00:25:09     0 days 00:01:00.360000   \n",
       "7  12       GoogleDriveFS.exe  0 days 00:00:38  0 days 00:00:12.666666666   \n",
       "8  21  ScreenClippingHost.exe  0 days 00:00:29     0 days 00:00:02.900000   \n",
       "\n",
       "   context_switch         last_updated  \n",
       "0               8  2024-09-10 18:36:52  \n",
       "1              27  2024-09-10 18:36:52  \n",
       "2               7  2024-09-10 18:36:52  \n",
       "3               4  2024-09-10 18:36:52  \n",
       "4               5  2024-09-10 18:36:52  \n",
       "5              14  2024-09-10 18:36:52  \n",
       "6              25  2024-09-10 18:36:52  \n",
       "7               3  2024-09-10 18:36:52  \n",
       "8              10  2024-09-10 18:36:52  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "programInsights = pd.read_sql(\"SELECT * FROM program_insights\",connection)\n",
    "#The first thing is to add a tracking ended entry. So...\n",
    "programInsights\n",
    "#average_time standarization needed. reduce decimal points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>total_context_switches</th>\n",
       "      <th>last_updated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [id, total_context_switches, last_updated]\n",
       "Index: []"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generalInsights = pd.read_sql(\"SELECT * FROM general_insights\",connection)\n",
    "#The first thing is to add a tracking ended entry. So...\n",
    "generalInsights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

================
File: src/public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/src/App.jsx
================
import { useState } from 'react'
import DashboardPage from './DashboardPage'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <DashboardPage></DashboardPage>
    </>
  )
}

export default App

================
File: src/src/DashboardPage.jsx
================
import { useState, useEffect } from 'react';
import { 
  BarChart, Bar, PieChart, Pie, LineChart, Line,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  ResponsiveContainer, Cell
} from 'recharts';
const { ipcRenderer } = window.require('electron');
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

export default function DashboardPage() {
  // Add IPC listeners
  useEffect(() => {
    ipcRenderer.on('tracking-update', (event, data) => {
      // Handle tracking updates
      console.log('Tracking update:', data);
    });

    return () => {
      ipcRenderer.removeAllListeners('tracking-update');
    };
  }, []);

  const startTracking = () => {
    ipcRenderer.send('start-tracking');
  };

  const stopTracking = () => {
    ipcRenderer.send('stop-tracking');
  };
  
  const [programInsights, setProgramInsights] = useState([]);
  const [focusTimeline, setFocusTimeline] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [insightsRes, timelineRes] = await Promise.all([
          fetch('http://localhost:8000/api/program-insights'),
          fetch('http://localhost:8000/api/focus-logs/timeline')
        ]);
        
        const insights = await insightsRes.json();
        const timeline = await timelineRes.json();
        
        // Filter out entries where program is 'None'
        const filteredInsights = insights.filter(item => item.program !== 'None');
        setProgramInsights(filteredInsights);
        setFocusTimeline(timeline);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  if (isLoading) {
    return <div className="flex items-center justify-center h-screen">Loading...</div>;
  }

  return (
    <div className="flex flex-col gap-8 w-full max-w-7xl mx-auto p-6">
      <h1 className="font-bold text-4xl text-center">TimeLens Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Total Time Per Program */}
        <div className="bg-white p-6 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold mb-4">Total Time Per Program</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={programInsights}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="program" />
              <YAxis label={{ value: 'Minutes', angle: -90, position: 'insideLeft' }} />
              <Tooltip />
              <Legend />
              <Bar dataKey="total_time" fill="#8884d8" name="Total Time (min)" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Context Switches Distribution */}
        <div className="bg-white p-6 rounded-lg shadow-lg">
          <h2 className="text-xl font-semibold mb-4">Context Switches Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={programInsights}
                dataKey="context_switch"
                nameKey="program"
                cx="50%"
                cy="50%"
                outerRadius={100}
                fill="#8884d8"
              >
                {programInsights.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Timeline View */}
        <div className="bg-white p-6 rounded-lg shadow-lg md:col-span-2">
          <h2 className="text-xl font-semibold mb-4">Daily Activity Timeline</h2>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={focusTimeline}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line 
                type="monotone" 
                dataKey="switches" 
                stroke="#8884d8" 
                name="Context Switches"
              />
              <Line 
                type="monotone" 
                dataKey="unique_programs" 
                stroke="#82ca9d" 
                name="Unique Programs"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
}

================
File: src/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: src/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: src/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: src/package.json
================
{
  "name": "timelens",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "recharts": "^2.13.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}

================
File: src/README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: src/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }

================
File: src/vite.config.js
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  base: process.env.ELECTRON=="true" ? './' : ".",
});

================
File: .gitignore
================
# Python cache files
__pycache__/
*.pyc
*.pyo
*.pyd

# Virtual environment
env/
venv/

# IDE settings
.vscode/

# Temporary or log files
*.log
*.tmp

# Operating system files
.DS_Store
Thumbs.db

# Project-specific ignores

results/focus.csv
results/todo.csv
results/focus.db

# Keep the README files
!README.md
!BLANK_README.md

# Dependencies
/node_modules
/.pnp
.pnp.js

# Testing
/coverage

# Production
/build

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Temporary folders
tmp/
temp/

================
File: editTodo.py
================
import pandas as pd
import json
from datetime import datetime
import os
import inquirer

path_to_folder = "results"

def addTodo(todoItem):
    # Get the current time
    now = datetime.now()
    data = {
        "Todo Item": todoItem,
        "Date Added": now.strftime("%m/%d/%Y"),
        "Time Added": now.strftime("%H:%M:%S"),
    }

    # Write to CSV file
    csv_file_path = f"{path_to_folder}/todo.csv"
    df = pd.DataFrame([data])

    # Append to CSV if it exists, otherwise create it
    if os.path.exists(csv_file_path):
        df.to_csv(csv_file_path, mode='a', header=False, index=False)
    else:
        df.to_csv(csv_file_path, index=False)

    print(f"Added '{todoItem}' to your to-do list.")

def delTodo():
    # Load the CSV file
    df = pd.read_csv(f"{path_to_folder}/todo.csv")
    
    # If the CSV is empty, there's nothing to delete
    if df.empty:
        print("The to-do list is empty.")
        return

    # Display the list of items to the user for selection
    questions = [
        inquirer.List(
            "todo_item",
            message="Which to-do item do you want to delete?",
            choices=df["Todo Item"].tolist()
        )
    ]
    
    selected_item = inquirer.prompt(questions)["todo_item"]

    # Filter out the selected item
    df = df[df["Todo Item"] != selected_item]
    
    # Save the updated DataFrame back to the CSV file
    df.to_csv(f"{path_to_folder}/todo.csv", index=False)
    
    print(f"Removed '{selected_item}' from your to-do list.")

================
File: main.js
================
// main.js
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const { spawn } = require('child_process');
let pythonProcess = null;
let mainWindow = null;

// Create the main window
function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  // In development, load from Vite dev server
  if (process.env.NODE_ENV === 'development') {
    mainWindow.loadURL('http://localhost:5173');
    mainWindow.webContents.openDevTools();
  } else {
    // In production, load the built files
    mainWindow.loadFile(path.join(__dirname, 'dist', 'index.html'));
  }
}

// Start Python FastAPI server
function startPythonServer() {
  const pythonScript = path.join(__dirname, 'backend', 'api.py');
  pythonProcess = spawn('python', [pythonScript], {
    stdio: 'pipe'
  });

  pythonProcess.stdout.on('data', (data) => {
    console.log(`Python stdout: ${data}`);
  });

  pythonProcess.stderr.on('data', (data) => {
    console.error(`Python stderr: ${data}`);
  });
}

// Start tracking function
function startTracking() {
  const trackingScript = path.join(__dirname, 'backend', 'focus.py');
  const trackingProcess = spawn('python', [trackingScript], {
    stdio: 'pipe'
  });

  trackingProcess.stdout.on('data', (data) => {
    mainWindow.webContents.send('tracking-update', data.toString());
  });

  return trackingProcess;
}

// IPC handlers
ipcMain.on('start-tracking', () => {
  const process = startTracking();
  mainWindow.webContents.send('tracking-started');
  
  // Handle stopping
  ipcMain.once('stop-tracking', () => {
    process.kill();
    mainWindow.webContents.send('tracking-stopped');
  });
});

// App lifecycle
app.whenReady().then(() => {
  createWindow();
  startPythonServer();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    if (pythonProcess) {
      pythonProcess.kill();
    }
    app.quit();
  }
});

================
File: old-readme.md
================
# TimeLens

What is TimeLens:
  TimeLens aims to be a productivity/activity tracker for your Windows PC. I aim to provide insights and meaningful metrics using the WindowsAPI, such as total time on programs, and how often you switch tasks. A more specific breakdown of the inspiration is provided below, but overall I started this app to try and find out my own computer habits. While there are other tools, I wanted to delve into the WindowsAPI for a long time and finally got to doing it.


Problem: 
- While there are many activity/time trackers and logs, the main concern is where this data is going.
Solution:
- A product that is open-source, so the user knows where everything is going (their own control).
- Ease of use with simple gui.
- Gives insightful data on what the user is actually doing on their computer.

Inspiration: Most people nowadays are aware of dangers of social media and "doomscrolling", short-form content e.t.c. I found that while I didn't engage as much with the traditional apps like Instagram, Tik-tok and others, I would use Youtube a lot on my phone. Now cutting that down, I found out about Youtube tracking how much time you use it across your account. My usage shocked me, so that inspired me to make this application and learn more about myself and my computer habits.

Market and Audience:
- People interested in tracking their computer habits.

Value Proposition:
- What is the unique value proposition of my product?
  - The application is focused on tracking personal data, but with no external snooping or any privacy concerns as it is run locally. The user will have the choice on how to export their data, whether they want it to be in simple text documents, or even onto specific spreadsheets that can provide user-specific insight.
 

Feasibility:
- Key Features:
  - Simple GUI that is easy to start.
  - Very low utilization rate (doesnt cause any sort of lag)
  - Data Tracking:
    - Application Name
    - Time Started
    - Time Ended
    - RAW DATA (Why do we want Raw data? This is unfiltered and the most basic so that if the user wants to do specific analysis, they can do so with the most barebones and interpret how they want to)

  Tech Stack:
  - Python (Initial data formatting and gathering)
  - SQLite (db)
  - React + ReCharts for Frontend Dashboard
  - Java Spring (Backend)
  - Electron ?


Database Format: 3 Tables
    - focus_logs (raw data)
    - program_insights (per program insights)
    - day_insights (per day insights)
    - month_insights (per month insights)
    - general_insights (general insights)

================
File: package.json
================
{
  "dependencies": {
    "recharts": "^2.12.7"
  }
}

================
File: README.md
================
# TimeLens

TimeLens is a standalone Windows application for tracking and analyzing your computer usage patterns with a focus on productivity and personal insights. All data is stored locally, ensuring complete privacy while providing meaningful metrics about your computer habits.

![TimeLens Dashboard](image.png)

## Features

### Activity Tracking
- **Window Focus Tracking**: Monitors active windows and applications in real-time
- **Program Usage Statistics**: Tracks time spent on different applications
- **Context Switch Analysis**: Measures how often you switch between different tasks
- **Private & Secure**: All data stored locally on your machine

### Data Visualization
- Interactive dashboard built with React and Recharts
- Visual insights including:
  - Total time per program
  - Context switch distribution
  - Daily activity timeline
  - Program usage patterns

### Todo Management
- Built-in todo list functionality
- Add and manage tasks through CLI interface
- Track task creation dates and times

## Tech Stack

- **Backend**: Python, FastAPI
- **Frontend**: React, Vite, TailwindCSS
- **Data Visualization**: Recharts
- **Database**: SQLite
- **Windows API Integration**: win32gui, psutil

## Installation

1. Clone the repository:
```bash
git clone https://github.com/kevindsouza03/timelens.git
cd timelens
```

2. Set up Python virtual environment:
```bash
python -m venv env
.\env\Scripts\activate  # Windows
source env/bin/activate  # Unix/MacOS
```

3. Install Python dependencies:
```bash
pip install fastapi uvicorn pandas win32gui psutil inquirer
```

4. Install frontend dependencies:
```bash
cd TimeLens
npm install
```

## Usage

### Start the Backend Server

1. Activate virtual environment:
```bash
.\env\Scripts\activate  # Windows
source env/bin/activate  # Unix/MacOS
```

2. Run the API server:
```bash
python api.py
```

### Start the Frontend

1. In a new terminal, navigate to the TimeLens directory:
```bash
cd TimeLens
```

2. Start the development server:
```bash
npm run dev
```

3. Open `http://localhost:5173` in your browser

### Track Activity

Run the main script to start tracking:
```bash
python main.py
```

Select from the following options:
- **Track Usage**: Begin monitoring window focus
- **Work Session**: Start a focused work session
- **Add Todo**: Add items to your todo list
- **Visualize**: Launch the visualization dashboard

Press `Ctrl+C` to stop tracking. Data will be automatically processed and stored.

## Database Structure

TimeLens uses SQLite with the following tables:

- `focus_logs`: Raw activity data
- `program_insights`: Per-program analytics
- `daily_insights`: Daily usage patterns
- `general_insights`: Overall usage statistics

## Development

### Project Structure
```
timelens/
├── api.py            # FastAPI backend server
├── focus.py          # Core tracking functionality
├── main.py           # CLI interface
├── editTodo.py       # Todo management
├── TimeLens/         # Frontend React application
└── results/          # Data storage directory
```

### Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Open a Pull Request

## Privacy

TimeLens is designed with privacy in mind:
- All data is stored locally in SQLite database
- No external services or APIs are used
- Complete control over your usage data
- Open source for transparency


## Acknowledgments

Built with:
- [React](https://reactjs.org/)
- [Recharts](https://recharts.org/)
- [FastAPI](https://fastapi.tiangolo.com/)
- [TailwindCSS](https://tailwindcss.com/)

================
File: todo.txt
================
How to display the what I want:
    """
    Per Program
        1. total_time : Total time on Program DONE
        2. Most used program in general *Can be accomplished by sorting via Total Time DONE
        3. average_time : sums program until a program is changed, then at end does time[program]/changes[program] DONE
        4. context_switch : changes[program], total number of program switches DONE
    """

    Total time per program.. Can be done with a Area/Pie chart or even a bar/table
